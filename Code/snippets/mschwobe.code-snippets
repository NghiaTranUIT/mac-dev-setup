{
  "Comment: Single /": {
    "prefix": "/",
    "body": [
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      ""
    ],
    "description": "Comment: Single /"
  },
  "Comment: Double //": {
    "prefix": "/",
    "body": [
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT ${1:sectionName}",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      ""
    ],
    "description": "Comment: Double //"
  },
  "Console: log": {
    "scope": "javascript,typescript",
    "prefix": "conlog",
    "body": [
      "console.log('⚡️ ${1}', ${1});"
    ],
    "description": "Console: log"
  },
  "Console: log stringified": {
    "scope": "javascript,typescript",
    "prefix": "constr",
    "body": [
      "console.log('⚡️ ${1}', JSON.stringify(${1}, null, 2));"
    ],
    "description": "Console: log stringified"
  },
  "Jest: test": {
    "scope": "javascript,typescript",
    "prefix": "jt",
    "body": [
      "test('Should', () => {",
      "  expect(${1:provided}).toEqual(${0:expected});",
      "});"
    ],
    "description": "Jest: test"
  },
  "Jest: describe": {
    "scope": "javascript,typescript",
    "prefix": "jd",
    "body": [
      "describe('${1:moduleName}', () => {",
      "  ${0}",
      "});"
    ],
    "description": "Jest: describe"
  },
  "Jest: describe test": {
    "scope": "javascript,typescript",
    "prefix": "jdt",
    "body": [
      "import ${TM_FILENAME_BASE/[\\-]//g} from './${TM_FILENAME_BASE/[\\-]//g}'",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "describe('${TM_FILENAME_BASE/[\\-]//g}', () => {",
      "  test('TODO: Write `${TM_FILENAME_BASE/[\\-]//g}` tests', () => {",
      "    expect(typeof ${TM_FILENAME_BASE/[\\-]//g}).toEqual(${0:'function'});",
      "  });",
      "});"
    ],
    "description": "Jest: describe and test"
  },
  "React: arrowFn classnames prop-types": {
    "prefix": "rafccp",
    "body": [
      "import classnames from 'classnames';",
      "import PropTypes from 'prop-types';",
      "",
      "import styles from './${TM_FILENAME_BASE/[\\-]//g}.module.css';",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "const ${TM_FILENAME_BASE/[\\-]//g} = ({ children, className, ...props }) => (",
      "  <div className={classnames('${TM_FILENAME_BASE/[\\-]//g}', styles.root, className)} {...props}>",
      "    {children}",
      "  </div>",
      ");",
      "",
      "${TM_FILENAME_BASE/[\\-]//g}.propTypes = {",
      "  children: PropTypes.node.isRequired,",
      "  className: PropTypes.string,",
      "};",
      "",
      "${TM_FILENAME_BASE/[\\-]//g}.defaultProps = {",
      "  className: undefined,",
      "};",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export default ${TM_FILENAME_BASE/[\\-]//g};"
    ],
    "description": "Creates a React arrow function component with CSS modules, classnames, and prop-types"
  }
}
